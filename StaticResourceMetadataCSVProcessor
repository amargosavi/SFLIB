// Code Generated by Sidekick is for learning and experimentation purposes only.
public class StaticResourceMetadataCSVProcessor {

    /**
     * Reads a CSV file from a Static Resource and creates Custom Metadata records.
     * @param metadataTypeName API name of the Custom Metadata Type (e.g., 'Test_Metadata__mdt')
     * @param staticResourceName Name of the Static Resource (without .csv extension)
     * @return String summary of the import process
     */
    public static String processCSVStaticResource(String metadataTypeName, String staticResourceName) {
        Integer successCount = 0;
        List<String> errors = new List<String>();

        try {
            // Load the file content as a string from the static resource
            StaticResource sr = [SELECT Body FROM StaticResource WHERE Name = :staticResourceName LIMIT 1];
            if (sr == null)
                return 'Static Resource not found: ' + staticResourceName;

            // Read the bytes and convert to String
            String csvString = sr.Body.toString();

            List<String> lines = csvString.split('\n');
            if (lines.isEmpty())
                return 'CSV content is empty.';

            // Read header
            List<String> headers = lines[0].replace('\r','').split(',');

            // Describe metadata fields
            Schema.SObjectType mdType = Schema.getGlobalDescribe().get(metadataTypeName);
            if (mdType == null)
                return 'Metadata Type not found: ' + metadataTypeName;
            Map<String, Schema.SObjectField> fieldMap = mdType.getDescribe().fields.getMap();

            List<SObject> recordsToInsert = new List<SObject>();

            // Parse rows
            for (Integer r = 1; r < lines.size(); r++) {
                String row = lines[r].trim();
                if (row == '') continue;
                List<String> vals = row.replace('\r','').split(',');
                if (vals.size() != headers.size()) {
                    errors.add('Row ' + (r+1) + ': header/data size mismatch.');
                    continue;
                }
                SObject metaRecord = mdType.newSObject();
                for (Integer c = 0; c < headers.size(); c++) {
                    String header = headers[c].trim();
                    if (fieldMap.containsKey(header)) {
                        metaRecord.put(header, vals[c].trim());
                    }
                }
                // Set DeveloperName if exists
                if (fieldMap.containsKey('DeveloperName') && metaRecord.get('DeveloperName') == null) {
                    metaRecord.put('DeveloperName', 'Row_' + String.valueOf(r));
                }
                recordsToInsert.add(metaRecord);
            }

            // DML - partial save for best error reporting
            Database.SaveResult[] results = Database.insert(recordsToInsert, false);
            for (Integer i = 0; i < results.size(); i++) {
                if (results[i].isSuccess()) {
                    successCount++;
                } else {
                    Database.Error[] errs = results[i].getErrors();
                    if (errs.size() > 0)
                        errors.add('Row ' + (i+2) + ': ' + errs[0].getMessage());
                }
            }

        } catch (Exception ex) {
            return 'Exception: ' + ex.getMessage();
        }
        return 'Inserted: ' + successCount + '. Errors: ' + String.join(errors, '; ');
    }
}
