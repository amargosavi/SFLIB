// Code Generated by Sidekick is for learning and experimentation purposes only.
public class MetaAPIStaticResourceCSVLoader {
    /**
     * Reads a CSV from Static Resource and deploys new Custom Metadata records using Metadata API.
     * @param metadataTypeName API name of the Custom Metadata Type (e.g., 'Country_Config__mdt')
     * @param staticResourceName Name of the static resource (without file extension)
     * @return Async Job Id for deployment or error message
     */
    public static String deployFromStaticResource(String metadataTypeName, String staticResourceName) {
        try {
            StaticResource sr = [
                SELECT Body
                FROM StaticResource WHERE Name = :staticResourceName LIMIT 1
            ];
            if (sr == null) {
                return 'Static Resource not found: ' + staticResourceName;
            }

            String csvContent = sr.Body.toString();

            // Parse header row
            List<String> lines = csvContent.split('\n');
            if (lines.isEmpty()) return 'Empty static resource!';
            
            List<String> headers = lines[0].replace('\r','').split(',');
            List<Metadata.CustomMetadata> records = new List<Metadata.CustomMetadata>();

            // For field mapping sanity
            Schema.SObjectType mdType = Schema.getGlobalDescribe().get(metadataTypeName);
            if (mdType == null) return 'Metadata Type not found: ' + metadataTypeName;
            Map<String, Schema.SObjectField> fieldMap = mdType.getDescribe().fields.getMap();
            
            for (Integer i = 1; i < lines.size(); i++) {
                String rawRow = lines[i].trim();
                if (rawRow == '') continue;
                List<String> values = rawRow.replace('\r','').split(',');
                if (values.size() != headers.size()) continue; // skip malformed row

                String developerName = '';
                String masterLabel = '';
                List<Metadata.CustomMetadataValue> cmValues = new List<Metadata.CustomMetadataValue>();

                for (Integer c = 0; c < headers.size(); c++) {
                    String field = headers[c].trim();
                    String val = values[c].trim();

                    if (field == 'DeveloperName') {
                        developerName = val;
                    } else if (fieldMap.containsKey('MasterLabel') && field == 'MasterLabel') {
                        masterLabel = val;
                    } else if (fieldMap.containsKey('Label') && field == 'Label') {
                        masterLabel = val;
                    } else if (fieldMap.containsKey(field)) {
                        Metadata.CustomMetadataValue mdv = new Metadata.CustomMetadataValue();
                        mdv.field = field;
                        mdv.value = val;
                        cmValues.add(mdv);
                    }
                }
                if (masterLabel == '') masterLabel = developerName;

                Metadata.CustomMetadata cmdt = new Metadata.CustomMetadata();
                cmdt.fullName = metadataTypeName + '.' + developerName;
                cmdt.label = masterLabel;
                cmdt.values = cmValues;
                records.add(cmdt);
            }

            if (records.isEmpty()) {
                return 'No valid rows found in CSV.';
            }

            Metadata.DeployContainer mdContainer = new Metadata.DeployContainer();
            for (Metadata.CustomMetadata rec : records) {
                mdContainer.addMetadata(rec);
            }

            Id asyncJobId = Metadata.Operations.enqueueDeployment(mdContainer, null);
            return 'Enqueued Metadata Deployment. Async Job Id: ' + String.valueOf(asyncJobId)
                + ' (Track using Metadata.Operations.retrieveDeploymentStatus)';
        } catch (Exception e) {
            return 'Exception: ' + e.getMessage();
        }
    }
}
