// Code Generated by Sidekick is for learning and experimentation purposes only.
public class BulkCustomMetadataCloner {
    /**
     * Bulk clones Custom Metadata records matching filter, each with a new DeveloperName.
     * @param metadataTypeName API name of the Custom Metadata Type (e.g., 'Country_Config__mdt')
     * @param filterSoql WHERE clause for selecting source records (eg: "Is_Active__c = true")
     * @param developerNameMapping Map from old DeveloperName to new DeveloperName
     * @return Async Job Id for deployment or error message
     */
    public static String bulkCloneCustomMetadata(
        String metadataTypeName,
        String filterSoql,
        Map<String, String> developerNameMapping
    ) {
        try {
            // Build SOQL for records to clone
            Map<String, Schema.SObjectField> fieldMap =
                Schema.getGlobalDescribe().get(metadataTypeName).getDescribe().fields.getMap();
            List<String> fieldsToGet = new List<String>();
            for (String f : fieldMap.keySet()) {
                fieldsToGet.add(f);
            }
            String soql = 'SELECT ' + String.join(fieldsToGet, ',') +
                ' FROM ' + metadataTypeName +
                ' WHERE ' + filterSoql;
            List<SObject> srcRecords = Database.query(soql);
            if (srcRecords.isEmpty()) {
                return 'No records found for filter: ' + filterSoql;
            }

            Metadata.DeployContainer mdContainer = new Metadata.DeployContainer();
            List<String> clonedRecords = new List<String>();
            List<String> skippedRecords = new List<String>();

            for (SObject src : srcRecords) {
                String oldDevName = (String)src.get('DeveloperName');
                if (!developerNameMapping.containsKey(oldDevName) || String.isBlank(developerNameMapping.get(oldDevName))) {
                    skippedRecords.add(oldDevName);
                    continue;
                }
                String newDevName = developerNameMapping.get(oldDevName);

                Metadata.CustomMetadata newRecord = new Metadata.CustomMetadata();
                newRecord.fullName = metadataTypeName + '.' + newDevName;

                // Label/MasterLabel
                if (src.get('MasterLabel') != null) {
                    newRecord.label = (String)src.get('MasterLabel');
                } else if (src.get('Label') != null) {
                    newRecord.label = (String)src.get('Label');
                } else {
                    newRecord.label = newDevName;
                }

                List<Metadata.CustomMetadataValue> cmValues = new List<Metadata.CustomMetadataValue>();
                for (String field : fieldMap.keySet()) {
                    if (field == 'DeveloperName' || field == 'MasterLabel' || field == 'Label') continue;
                    Object val = src.get(field);
                    if (val != null) {
                        Metadata.CustomMetadataValue mdv = new Metadata.CustomMetadataValue();
                        mdv.field = field;
                        mdv.value = val;
                        cmValues.add(mdv);
                    }
                }
                newRecord.values = cmValues;
                mdContainer.addMetadata(newRecord);
                clonedRecords.add(oldDevName + ' â†’ ' + newDevName);
            }

            if (clonedRecords.isEmpty()) {
                return 'No records cloned (mapping missing for all filter results). Skipped: ' + String.join(skippedRecords, ',');
            }

            Id asyncJobId = Metadata.Operations.enqueueDeployment(mdContainer, null);
            return 'Enqueued deployment for ' + clonedRecords.size() + ' cloned records. Job Id: ' + String.valueOf(asyncJobId)
                + '. Skipped: ' + String.join(skippedRecords, ',');
        } catch (Exception e) {
            return 'Exception: ' + e.getMessage();
        }
    }
}



// Code Generated by Sidekick is for learning and experimentation purposes only.
Map<String, String> mapping = new Map<String, String>{
    'US' => 'US_COPY',
    'CA' => 'CA_COPY'
};

String filter = 'Is_Active__c = true';
String result = BulkCustomMetadataCloner.bulkCloneCustomMetadata(
    'Country_Config__mdt',
    filter,
    mapping
);
System.debug(result);
