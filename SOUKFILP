// Code Generated by Sidekick is for learning and experimentation purposes only.
public with sharing class PostmanController {
    @AuraEnabled
    public static String makeCallout(String endpoint, String method, String requestBody, String authHeader) {
        HttpRequest req = new HttpRequest();
        req.setEndpoint(endpoint);
        req.setMethod(method);
        if (String.isNotBlank(authHeader)) {
            req.setHeader('Authorization', authHeader);
        }
        req.setHeader('Content-Type', 'application/json');
        if (method == 'POST' || method == 'PUT' || method == 'PATCH') {
            req.setBody(requestBody);
        }
        Http http = new Http();
        try {
            HttpResponse res = http.send(req);
            return res.getBody();
        } catch (Exception e) {
            return 'Error: ' + e.getMessage();
        }
    }
}



import { LightningElement, track } from 'lwc';
import makeCallout from '@salesforce/apex/PostmanController.makeCallout';

export default class PostmanLwc extends LightningElement {
    @track endpoint = '';
    @track method = 'GET';
    @track requestBody = '';
    @track authHeader = '';
    @track response = '';

    methods = [
        { label: 'GET', value: 'GET' },
        { label: 'POST', value: 'POST' },
        { label: 'PUT', value: 'PUT' },
        { label: 'PATCH', value: 'PATCH' },
        { label: 'DELETE', value: 'DELETE' }
    ];

    handleInputChange(event) {
        this[event.target.name] = event.target.value;
    }

    async handleSend() {
        try {
            const res = await makeCallout({
                endpoint: this.endpoint,
                method: this.method,
                requestBody: this.requestBody,
                authHeader: this.authHeader
            });
            this.response = res;
        } catch (error) {
            this.response = error.body ? error.body.message : error.message;
        }
    }
}


<template>
    <lightning-card title="Simple Postman">
        <div class="slds-p-around_medium">
            <lightning-input label="Endpoint" name="endpoint" value={endpoint} onchange={handleInputChange}></lightning-input>
            <lightning-combobox
                label="Method"
                name="method"
                value={method}
                options={methods}
                onchange={handleInputChange}>
            </lightning-combobox>
            <lightning-textarea label="Request Body" name="requestBody" value={requestBody} onchange={handleInputChange}></lightning-textarea>
            <lightning-input label="Authorization Header" name="authHeader" value={authHeader} onchange={handleInputChange}></lightning-input>
            <lightning-button label="Send" variant="brand" onclick={handleSend} class="slds-m-top_medium"></lightning-button>
        </div>
        <div class="slds-p-around_medium">
            <lightning-formatted-text value={response}></lightning-formatted-text>
        </div>
    </lightning-card>
</template>
 
